{"ast":null,"code":"var _jsxFileName = \"/Users/tracynle/Bootcamp/react_project/client/src/components/SearchBar/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport InputBase from '@material-ui/core/InputBase';\nimport { withStyles } from '@material-ui/core/styles';\nimport axios from \"axios\"; // styles for search bar\n\nconst styles = theme => ({\n  inputRoot: {\n    color: 'inherit',\n    width: '100%'\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200\n      }\n    }\n  }\n});\n\nclass SearchBar extends React.Component {\n  doSomethingWithSearchTerms(event) {\n    // enter button has a keycode of 13\n    if (event.keyCode === 13) {\n      // the user's input:\n      console.log(event.target.value); // when the enter key is pressed, the console will print\n\n      console.log(\"Enter was pressed!!\"); // Call the API to do the search to the server\n\n      axios.get('/api/search/', {\n        // the params include a map of what the user typed \n        params: {\n          item: event.target.value\n        }\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  } // search bar in nav\n\n\n  render() {\n    return React.createElement(InputBase, {\n      placeholder: \"Search\\u2026\",\n      classes: {\n        root: this.props.classes.inputRoot,\n        input: this.props.classes.inputInput\n      },\n      onKeyUp: this.doSomethingWithSearchTerms,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n}\n\nSearchBar.propTypes = {\n  classes: PropTypes.object.isRequired // Console will print out what user is typed in search\n\n};\nexport default withStyles(styles)(SearchBar);","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/react_project/client/src/components/SearchBar/index.js"],"names":["React","PropTypes","InputBase","withStyles","axios","styles","theme","inputRoot","color","width","inputInput","paddingTop","spacing","unit","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","breakpoints","up","SearchBar","Component","doSomethingWithSearchTerms","event","keyCode","console","log","target","value","get","params","item","then","response","catch","error","render","root","props","classes","input","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACrBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,SADE;AAETC,IAAAA,KAAK,EAAE;AAFE,GADU;AAKrBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EAAEL,KAAK,CAACM,OAAN,CAAcC,IADhB;AAEVC,IAAAA,YAAY,EAAER,KAAK,CAACM,OAAN,CAAcC,IAFlB;AAGVE,IAAAA,aAAa,EAAET,KAAK,CAACM,OAAN,CAAcC,IAHnB;AAIVG,IAAAA,WAAW,EAAEV,KAAK,CAACM,OAAN,CAAcC,IAAd,GAAqB,EAJxB;AAKVI,IAAAA,UAAU,EAAEX,KAAK,CAACY,WAAN,CAAkBC,MAAlB,CAAyB,OAAzB,CALF;AAMVV,IAAAA,KAAK,EAAE,MANG;AAOV,KAACH,KAAK,CAACc,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,GAA8B;AAC5BZ,MAAAA,KAAK,EAAE,GADqB;AAE5B,iBAAW;AACTA,QAAAA,KAAK,EAAE;AADE;AAFiB;AAPpB;AALS,CAAL,CAApB;;AAqBA,MAAMa,SAAN,SAAwBtB,KAAK,CAACuB,SAA9B,CAAwC;AAMpCC,EAAAA,0BAA0B,CAACC,KAAD,EAAQ;AAChC;AACA,QAAGA,KAAK,CAACC,OAAN,KAAkB,EAArB,EAAyB;AACvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,MAAN,CAAaC,KAAzB,EAFuB,CAGvB;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAJuB,CAKvB;;AACAxB,MAAAA,KAAK,CAAC2B,GAAN,CAAU,cAAV,EAA0B;AACxB;AACAC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAER,KAAK,CAACI,MAAN,CAAaC;AADb;AAFgB,OAA1B,EAMCI,IAND,CAMM,UAAUC,QAAV,EAAoB;AACxBR,QAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACD,OARD,EASCC,KATD,CASO,UAAUC,KAAV,EAAiB;AACtBV,QAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD,OAXD;AAaD;AACF,GA5BmC,CA8BpC;;;AACAC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,SAAD;AACE,MAAA,WAAW,EAAC,cADd;AAEE,MAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,OAAX,CAAmBlC,SADpB;AAELmC,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,OAAX,CAAmB/B;AAFrB,OAFX;AAME,MAAA,OAAO,EAAK,KAAKc,0BANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA1CmC;;AAAlCF,S,CACKqB,S,GAAY;AACfF,EAAAA,OAAO,EAAExC,SAAS,CAAC2C,MAAV,CAAiBC,UADX,CAIpB;;AAJoB,C;AA+CvB,eAAe1C,UAAU,CAACE,MAAD,CAAV,CAAmBiB,SAAnB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputBase from '@material-ui/core/InputBase';\nimport { withStyles } from '@material-ui/core/styles';\nimport axios from \"axios\";\n\n// styles for search bar\nconst styles = theme => ({\n    inputRoot: {\n      color: 'inherit',\n      width: '100%',\n    },\n    inputInput: {\n      paddingTop: theme.spacing.unit,\n      paddingRight: theme.spacing.unit,\n      paddingBottom: theme.spacing.unit,\n      paddingLeft: theme.spacing.unit * 10,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: 120,\n        '&:focus': {\n          width: 200,\n        },\n      },\n    },\n  });\n  \nclass SearchBar extends React.Component {\n    static propTypes = {\n        classes: PropTypes.object.isRequired,\n    }\n\n   // Console will print out what user is typed in search\n    doSomethingWithSearchTerms(event) {\n      // enter button has a keycode of 13\n      if(event.keyCode === 13) {\n        // the user's input:\n        console.log(event.target.value);\n        // when the enter key is pressed, the console will print\n        console.log(\"Enter was pressed!!\");\n        // Call the API to do the search to the server\n        axios.get('/api/search/', {\n          // the params include a map of what the user typed \n          params: {\n            item: event.target.value\n          }\n        })\n        .then(function (response) {\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n        \n      }\n    }\n    \n    // search bar in nav\n    render() {\n      return (\n        <InputBase \n          placeholder=\"Searchâ€¦\"\n          classes={{\n              root: this.props.classes.inputRoot,\n              input: this.props.classes.inputInput,\n          }}\n          onKeyUp = { this.doSomethingWithSearchTerms }\n        />\n      )\n    }\n  \n\n\n}\n\nexport default withStyles(styles)(SearchBar);\n\n"]},"metadata":{},"sourceType":"module"}